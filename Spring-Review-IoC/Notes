TASK 1:
    1 - Create new module Spring-Review-IoC.
    2 - Add Spring Core dependency.
    3 - Create one package named bean-practice.
    4 - Create 2 classes:
        - FullTimeEmployee
        - PartTimeEmployee
    5 - Create one method for each class:
        - createAccount() -> print something (void).
    6 - Get beans using Spring Core @Bean annotation.
    -------------
    7 - We need two String objects:
        "Welcome to CydeoApp"
        "Spring Core Practice"
    8 - Print those two objects in the same project (with new config file).

TASK 2:
    1 - Create new package under java: stereotype_annotations.
    2 - Create Model and Config Package.
    3 - Under the Model package:
        - DataStructure
        - DevOps
        - Microservice
    4 - Create method for each of them which is getTotalHours() and print some
        hour. Ex:  "Total hours: " + 20;
    5 - We only need object from DataStructure and Microservices.
    6 - Use Stereotype Annotation way to solve it.

TASK 3:
    7 - Create ExtraHours class inside the model package.
    8 - Create a method getHours() that returns 10;
    9 - Use this method inside the DataStructure class to increase the total hours.
    10 - Try to use lombok annotations for creating constructor.

TASK 4:
    1 - Create new module: spring-review-project.
    2 - Create config, repository, model, service packages.
    3 - Create Employee class with:
        - name
        - department
        - hourlyRate fields
    4 - Create EmployeeRepository interface.
        - One abstract method -> int getHourlyRate().
    5- Create impl class DBEmployeeRepository (we will assume we're getting info from db).
        - Override the method.
        - Create one employee inside.
        - Return emp1.getHourlyRate().
    6 - Create HoursRepository interface.
        - int getHours() abstract method.
    7 - Create RegularHours class override method and return 40.
    8 - Create Salary Service.
        - Create calculateRegularSalary() method and print salary (hourlyRate * RegularHours)
          (no static values).
    9 - Create OvertimeHours class, implement hours interface and override method and return 15.
    10 - Handle the error when you call calculateRegularSalary method.
